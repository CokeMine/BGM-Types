/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/user/{username}": {
    get: {
      parameters: {
        path: {
          /** 用户名 <br> 也可使用 UID */
          username: components["parameters"]["username"];
        };
      };
      responses: {
        /** 返回用户基础信息 */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
  };
  "/user/{username}/collection": {
    get: {
      parameters: {
        path: {
          /** 用户名 <br> 也可使用 UID */
          username: components["parameters"]["username"];
        };
        query: {
          /** 收藏类型 <br> watching = 在看的动画与三次元条目 <br> all_watching = 在看的动画三次元与书籍条目 */
          cat: "watching" | "all_watching";
          /** 收藏条目 ID <br> 批量查询收藏状态，将条目 ID 以半角逗号分隔，如 1,2,4,6 */
          ids?: string;
          /** medium / small <br> 默认为 medium。small 时不返回条目详细信息 */
          responseGroup?: "small" | "medium";
        };
      };
      responses: {
        /** 获取用户收藏列表，默认为在看 */
        200: {
          content: {
            "application/json": {
              /** @description 番剧标题 */
              name: string;
              /** @description 章节 ID */
              subject_id: number;
              /** @description 完成话数 */
              ep_status: number;
              /** @description 完成卷数（书籍） */
              vol_status: unknown;
              /** @description 上次更新时间 */
              lasttouch: number;
              subject: components["schemas"]["SubjectBase"] & {
                /**
                 * @description 话数
                 * @example 27
                 */
                eps: number;
                /**
                 * @description 话数
                 * @example 27
                 */
                eps_count: number;
                collection: components["schemas"]["SubjectCollection"];
              };
            }[];
          };
        };
      };
    };
  };
  "/user/{username}/collections/{subject_type}": {
    get: {
      parameters: {
        path: {
          /** 用户名 <br> 也可使用 UID */
          username: components["parameters"]["username"];
          /** 条目类型，详见 [SubjectTypeName](#model-SubjectTypeName) */
          subject_type: components["schemas"]["SubjectTypeName"];
        };
        query: {
          /** [https://bgm.tv/dev/app](https://bgm.tv/dev/app) 申请到的 App ID */
          app_id: components["parameters"]["app_id"];
          /** 显示条数 <br> 最多 25 */
          max_results?: number;
        };
      };
      responses: {
        /** 获取用户指定类型的收藏概览，固定返回最近更新的收藏，不支持翻页 */
        200: {
          content: {
            "application/json": {
              type: components["schemas"]["SubjectType"];
              name: components["schemas"]["SubjectTypeName"];
              /**
               * @description 条目类型中文名
               * @example 动画
               */
              name_cn: string;
              /** @description 收藏列表 */
              collects: {
                status: components["schemas"]["CollectionStatus"];
                count: number;
                list: {
                  /** @description 条目 ID */
                  subject_id: string;
                  subject: components["schemas"]["SubjectBase"];
                }[];
              }[];
            }[];
          };
        };
      };
    };
  };
  "/user/{username}/collections/status": {
    get: {
      parameters: {
        path: {
          /** 用户名 <br> 也可使用 UID */
          username: components["parameters"]["username"];
        };
        query: {
          /** [https://bgm.tv/dev/app](https://bgm.tv/dev/app) 申请到的 App ID */
          app_id: components["parameters"]["app_id"];
        };
      };
      responses: {
        /** 获取用户所有收藏信息 */
        200: {
          content: {
            "application/json": {
              type: components["schemas"]["SubjectType"];
              name: components["schemas"]["SubjectTypeName"];
              /**
               * @description 条目类型中文名
               * @example 动画
               */
              name_cn: string;
              /** @description 收藏列表 */
              collects: {
                status: components["schemas"]["CollectionStatus"];
                count: number;
              }[];
            }[];
          };
        };
      };
    };
  };
  "/user/{username}/progress": {
    get: {
      parameters: {
        path: {
          /** 用户名 <br> 也可使用 UID */
          username: components["parameters"]["username"];
        };
        query: {
          /** 条目 ID <br> 获取指定条目收视进度 */
          subject_id?: number;
        };
      };
      responses: {
        /** 返回用户收视进度 */
        200: {
          content: {
            "application/json": {
              /** @description 条目 ID */
              subject_id: number;
              /** @description 章节列表 */
              eps: {
                /** @description 章节 ID */
                id: number;
                status: {
                  id: components["schemas"]["EpStatusId"];
                  /** @example Watched */
                  css_name: string;
                  url_name: components["schemas"]["EpStatusType"];
                  cn_name: components["schemas"]["EpStatusName"];
                };
              }[];
            }[];
          };
        };
        /** 未授权 */
        401: {
          content: {
            "application/json": components["schemas"]["StatusCode"];
          };
        };
      };
    };
  };
  "/calendar": {
    get: {
      responses: {
        /** 每日放送 */
        200: {
          content: {
            "application/json": {
              weekday: {
                /** @example Mon */
                en: string;
                /** @example 星期一 */
                cn: string;
                /** @example 月耀日 */
                ja: string;
                /** @example 1 */
                id: number;
              };
              items: components["schemas"]["SubjectSmall"][];
            }[];
          };
        };
      };
    };
  };
  "/search/subject/{keywords}": {
    get: {
      parameters: {
        path: {
          /** 关键词 <br> 需要 URL Encode */
          keywords: string;
        };
        query: {
          /** 条目类型，参考 [SubjectType](#model-SubjectType) */
          type?: components["schemas"]["SubjectType"];
          /** 返回数据大小，参考 [ResponseGroup](#model-ResponseGroup) <br> 默认为 small */
          responseGroup?: components["parameters"]["responseGroup"];
          /** 开始条数 */
          start?: number;
          /** 每页条数 <br> 最多 25 */
          max_results?: number;
        };
      };
      responses: {
        /** 搜索结果 */
        200: {
          content: {
            "application/json": {
              /** @description 总条数 */
              results: number;
              /** @description 结果列表 */
              list: components["schemas"]["SubjectSmall"][];
            };
          };
        };
      };
    };
  };
  "/ep/{id}/status/{status}": {
    get: {
      parameters: {
        path: {
          /** 章节 ID */
          id: components["parameters"]["ep_id"];
          /** 收视类型，参考 [EpStatusType](#model-EpStatusType) */
          status: components["parameters"]["ep_status"];
        };
      };
      responses: {
        /** 成功 */
        200: {
          content: {
            "application/json": components["schemas"]["StatusCode"];
          };
        };
        /** 未授权 */
        401: {
          content: {
            "application/json": components["schemas"]["StatusCode"];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** 章节 ID */
          id: components["parameters"]["ep_id"];
          /** 收视类型，参考 [EpStatusType](#model-EpStatusType) */
          status: components["parameters"]["ep_status"];
        };
        query: {
          /** 使用 POST 批量更新 <br> 将章节以半角逗号分隔，如 `3697,3698,3699`。请求时 URL 中的 ep_id 为最后一个章节 ID */
          ep_id?: string;
        };
      };
      responses: {
        /** 成功 */
        200: {
          content: {
            "application/json": components["schemas"]["StatusCode"];
          };
        };
        /** 未授权 */
        401: {
          content: {
            "application/json": components["schemas"]["StatusCode"];
          };
        };
      };
    };
  };
  "/subject/{subject_id}/update/watched_eps": {
    post: {
      parameters: {
        path: {
          /** 条目 ID */
          subject_id: components["parameters"]["subject_id"];
        };
        query: {
          /** 如看到 123 话则 POST `123` <br> 书籍条目传 watched_eps 与 watched_vols 至少其一 */
          watched_eps: string;
          /** 如看到第 3 卷则 POST `3`, 仅对书籍条目有效 */
          watched_vols?: string;
        };
      };
      responses: {
        /** 成功 */
        200: {
          content: {
            "application/json": components["schemas"]["StatusCode"];
          };
        };
        /** 未授权 */
        401: {
          content: {
            "application/json": components["schemas"]["StatusCode"];
          };
        };
      };
    };
  };
  "/collection/{subject_id}": {
    get: {
      parameters: {
        path: {
          /** 条目 ID */
          subject_id: components["parameters"]["subject_id"];
        };
      };
      responses: {
        200: components["responses"]["Collection"];
        /** 用户未收藏该条目 */
        400: {
          content: {
            "application/json": components["schemas"]["StatusCode"];
          };
        };
        /** 未授权 */
        401: {
          content: {
            "application/json": components["schemas"]["StatusCode"];
          };
        };
      };
    };
  };
  "/collection/{subject_id}/{action}": {
    /** 管理收藏。Content-type必须为multipart/form-data或application/x-www-form-urlencoded，参数都得放在body里。 */
    post: {
      parameters: {
        path: {
          /** 条目 ID */
          subject_id: components["parameters"]["subject_id"];
          /** 收藏动作 <br> create = 添加收藏 <br> update = 更新收藏 <br> 可以统一使用 `update`，系统会自动判断需要新建还是更新收藏 */
          action: "create" | "update";
        };
      };
      responses: {
        200: components["responses"]["Collection"];
        /** 未授权 */
        401: {
          content: {
            "application/json": components["schemas"]["StatusCode"];
          };
        };
      };
      /** 必须是content-type对应的形式，不能采用Raw */
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description 收藏状态，参考 [CollectionStatusType](#model-CollectionStatusType) */
            status: components["schemas"]["CollectionStatusType"];
            /** @description 简评 */
            comment?: string;
            /** @description 标签 <br> 以半角空格分割 */
            tags?: string;
            /** @description 评分 <br> 1-10 <br> 不填默认重置为未评分 */
            rating?: number;
            /** @description 收藏隐私 <br> 0 = 公开 <br> 1 = 私密 <br> 不填默认为0 */
            privacy?: number;
          };
        };
      };
    };
  };
  "/v0/subjects/{subject_id}": {
    /** cache with 300s */
    get: operations["get_subject_by_id_v0_subjects__subject_id__get"];
  };
  "/v0/subjects/{subject_id}/persons": {
    get: operations["get_subject_persons_v0_subjects__subject_id__persons_get"];
  };
  "/v0/subjects/{subject_id}/characters": {
    get: operations["get_subject_characters_v0_subjects__subject_id__characters_get"];
  };
  "/v0/subjects/{subject_id}/subjects": {
    get: operations["get_subject_relations_v0_subjects__subject_id__subjects_get"];
  };
  "/v0/episodes": {
    get: operations["get_episodes_v0_episodes_get"];
  };
  "/v0/episodes/{episode_id}": {
    get: operations["get_episode_v0_episodes__episode_id__get"];
  };
  "/v0/characters/{character_id}": {
    /** cache with 60s */
    get: operations["get_character_detail_v0_characters__character_id__get"];
  };
  "/v0/characters/{character_id}/subjects": {
    get: operations["get_person_subjects_v0_characters__character_id__subjects_get"];
  };
  "/v0/characters/{character_id}/persons": {
    get: operations["get_character_persons_v0_characters__character_id__persons_get"];
  };
  "/v0/persons/{person_id}": {
    /** cache with 60s */
    get: operations["get_person_v0_persons__person_id__get"];
  };
  "/v0/persons/{person_id}/subjects": {
    get: operations["get_person_subjects_v0_persons__person_id__subjects_get"];
  };
  "/v0/persons/{person_id}/characters": {
    get: operations["get_person_characters_v0_persons__person_id__characters_get"];
  };
  "/v0/me": {
    /** 返回当前 Access Token 对应的用户信息 */
    get: operations["get_user_v0_me_get"];
  };
  "/v0/users/{username}/collections": {
    /** 获取对应用户的收藏，查看私有收藏需要access token。 */
    get: operations["get_user_collection_v0_users__username__collections_get"];
  };
  "/v0/revisions/persons": {
    get: operations["get_person_revisions_v0_revisions_persons_get"];
  };
  "/v0/revisions/persons/{revision_id}": {
    get: operations["get_person_revision_v0_revisions_persons__revision_id__get"];
  };
  "/v0/revisions/characters": {
    get: operations["get_character_revisions_v0_revisions_characters_get"];
  };
  "/v0/revisions/characters/{revision_id}": {
    get: operations["get_character_revision_v0_revisions_characters__revision_id__get"];
  };
  "/v0/revisions/subjects": {
    get: operations["get_subject_revisions_v0_revisions_subjects_get"];
  };
  "/v0/revisions/subjects/{revision_id}": {
    get: operations["get_subject_revision_v0_revisions_subjects__revision_id__get"];
  };
  "/v0/revisions/episodes": {
    get: operations["get_episode_revisions_v0_revisions_episodes_get"];
  };
  "/v0/revisions/episodes/{revision_id}": {
    get: operations["get_episode_revision_v0_revisions_episodes__revision_id__get"];
  };
  "/v0/indices/{index_id}": {
    get: operations["get_index_by_id_v0_indices__index_id__get"];
  };
  "/v0/indices/{index_id}/subjects": {
    get: operations["get_index_subjects_v0_indices__index_id__subjects_get"];
  };
}

export interface components {
  schemas: {
    /**
     * @description 收藏状态 ID
     * @example 5
     */
    CollectionStatusId: 1 | 2 | 3 | 4 | 5;
    /**
     * @description 收藏状态类型
     * @example dropped
     */
    CollectionStatusType: "wish" | "collect" | "do" | "on_hold" | "dropped";
    /**
     * @description 收藏状态名称
     * @example 抛弃
     */
    CollectionStatusName: "想做" | "做过" | "在做" | "搁置" | "抛弃";
    /** @description 收藏状态 <br> 1 = wish = 想做 <br> 2 = collect = 做过 <br> 3 = do = 在做 <br> 4 = on_hold = 搁置 <br> 5 = dropped = 抛弃 */
    CollectionStatus: {
      id: components["schemas"]["CollectionStatusId"];
      type: components["schemas"]["CollectionStatusType"];
      name: components["schemas"]["CollectionStatusName"];
    };
    /** @description 章节状态 ID */
    EpStatusId: 2 | 1 | 3;
    /** @description 章节状态类型 */
    EpStatusType: "watched" | "queue" | "drop" | "remove";
    /** @description 章节状态名称 */
    EpStatusName: "看过" | "想看" | "抛弃" | "撤销";
    /**
     * @description 返回数据大小
     * @default small
     */
    ResponseGroup: "small" | "medium";
    /**
     * @description 条目类型 <br> 1 = book <br> 2 = anime <br> 3 = music <br> 4 = game <br> 6 = real
     * @example 2
     */
    SubjectType: 1 | 2 | 3 | 4 | 6;
    /**
     * @description 条目类型名称 <br> book <br> anime <br> music <br> game <br> real
     * @example anime
     */
    SubjectTypeName: "book" | "anime" | "music" | "game" | "real";
    /** @description 收藏人数 */
    SubjectCollection: {
      /**
       * @description 想做
       * @example 608
       */
      wish: number;
      /**
       * @description 做过
       * @example 3010
       */
      collect: number;
      /**
       * @description 在做
       * @example 103
       */
      doing: number;
      /**
       * @description 搁置
       * @example 284
       */
      on_hold: number;
      /**
       * @description 抛弃
       * @example 86
       */
      dropped: number;
    };
    Subject: {
      /**
       * @description 条目 ID
       * @example 12
       */
      id: number;
      /**
       * @description 条目地址
       * @example http://bgm.tv/subject/12
       */
      url: string;
      type: components["schemas"]["SubjectType"];
      /**
       * @description 条目名称
       * @example ちょびっツ
       */
      name: string;
    };
    SubjectBase: components["schemas"]["Subject"] & {
      /**
       * @description 条目中文名称
       * @example 人形电脑天使心
       */
      name_cn: string;
      /**
       * @description 剧情简介
       * @example 在不久的将来,电子技术飞速发展,电脑成为人们生活中不可缺少的一部分.主角的名字是本须和秀树,是个19岁的少年,由于考试失败,来到东京上补习班,过着贫穷潦倒的生活……\r\n到达东京的第一天,他很幸运的在垃圾堆捡到一个人型电脑,一直以来秀树都非常渴望拥有个人电脑.当他抱着她带返公寓后,却不知如何开机,在意想不到的地方找到开关并开启后,故事就此展开\r\n本须和秀树捡到了人型计算机〔唧〕。虽然不晓得她到底是不是〔Chobits〕，但她的身上似乎藏有极大的秘密。看到秀树为了钱而烦恼，唧出去找打工，没想到却找到了危险的工作！为了让秀树开心，唧开始到色情小屋打工。但她在遭到过度激烈的强迫要求之后失控。让周遭计算机因此而强制停摆。\r\n另一方面，秀树发现好友新保与补习班的清水老师有着不可告人的关系……
       */
      summary: string;
      /**
       * @description 放送开始日期
       * @example 2002-04-02
       */
      air_date: string;
      /**
       * @description 放送星期
       * @example 2
       */
      air_weekday: number;
      /** @description 封面 */
      images: {
        /** @example http://lain.bgm.tv/pic/cover/l/c2/0a/12_24O6L.jpg */
        large: string;
        /** @example http://lain.bgm.tv/pic/cover/c/c2/0a/12_24O6L.jpg */
        common: string;
        /** @example http://lain.bgm.tv/pic/cover/m/c2/0a/12_24O6L.jpg */
        medium: string;
        /** @example http://lain.bgm.tv/pic/cover/s/c2/0a/12_24O6L.jpg */
        small: string;
        /** @example http://lain.bgm.tv/pic/cover/g/c2/0a/12_24O6L.jpg */
        grid: string;
      };
    };
    SubjectSmall: components["schemas"]["SubjectBase"] & {
      /**
       * @description 话数
       * @example 27
       */
      eps: number;
      /**
       * @description 话数
       * @example 27
       */
      eps_count: number;
      /** @description 评分 */
      rating: {
        /**
         * @description 总评分人数
         * @example 2289
         */
        total: number;
        /** @description 各分值评分人数 */
        count: {
          /** @example 5 */
          "1": number;
          /** @example 3 */
          "2": number;
          /** @example 4 */
          "3": number;
          /** @example 6 */
          "4": number;
          /** @example 46 */
          "5": number;
          /** @example 267 */
          "6": number;
          /** @example 659 */
          "7": number;
          /** @example 885 */
          "8": number;
          /** @example 284 */
          "9": number;
          /** @example 130 */
          "10": number;
        };
        /**
         * @description 评分
         * @example 7.6
         */
        score: number;
      };
      /**
       * @description 排名
       * @example 573
       */
      rank: number;
      collection: components["schemas"]["SubjectCollection"];
    };
    /** @description 用户信息 */
    User: {
      /**
       * @description 用户 id
       * @example 1
       */
      id: number;
      /**
       * @description 用户主页地址
       * @example http://bgm.tv/user/sai
       */
      url: string;
      /**
       * @description 用户名
       * @example sai
       */
      username: string;
      /**
       * @description 昵称
       * @example Sai
       */
      nickname: string;
      /** @description 头像地址 */
      avatar: {
        /** @example http://lain.bgm.tv/pic/user/l/000/00/00/1.jpg?r=1391790456 */
        large: string;
        /** @example http://lain.bgm.tv/pic/user/m/000/00/00/1.jpg?r=1391790456 */
        medium: string;
        /** @example http://lain.bgm.tv/pic/user/s/000/00/00/1.jpg?r=1391790456 */
        small: string;
      };
      /**
       * @description 签名
       * @example Awesome!
       */
      sign: string;
      usergroup: components["schemas"]["UserGroup"];
    };
    /**
     * @description 用户组 <br> 1 = 管理员 <br> 2 = Bangumi 管理猿 <br> 3 = 天窗管理猿 <br> 4 = 禁言用户 <br> 5 = 禁止访问用户 <br> 8 = 人物管理猿 <br> 9 = 维基条目管理猿 <br> 10 = 用户 <br> 11 = 维基人
     * @example 11
     */
    UserGroup: 1 | 2 | 3 | 4 | 5 | 8 | 9 | 10 | 11;
    /** @description 响应状态（HTTP 状态码都为 200） */
    StatusCode: {
      /** @description 当前请求的地址 */
      request: string;
      /** @description 状态码 <br> 200 OK <br> 202 Accepted <br> 304 Not Modified <br> 30401 Not Modified: Collection already exists <br> 400 Bad Request <br> 40001 Error: Nothing found with that ID <br> 401 Unauthorized <br> 40101 Error: Auth failed over 5 times <br> 40102 Error: Username is not an Email address <br> 405 Method Not Allowed <br> 404 Not Found */
      code:
        | 200
        | 202
        | 304
        | 30401
        | 400
        | 40001
        | 401
        | 40101
        | 40102
        | 405
        | 404;
      /** @description 状态信息 */
      error: string;
    };
    /** Avatar */
    Avatar: {
      /** Large */
      large: string;
      /** Medium */
      medium: string;
      /** Small */
      small: string;
    };
    /**
     * BloodType
     * @description An enumeration.
     */
    BloodType: 1 | 2 | 3 | 4;
    /** CharacterDetail */
    CharacterDetail: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      /** @description 角色，机体，舰船，组织... */
      type: components["schemas"]["CharacterType"];
      /**
       * Images
       * @description object with some size of images, this object maybe `null`
       */
      images?: components["schemas"]["PersonImages"];
      /** Summary */
      summary: string;
      /** Locked */
      locked: boolean;
      /**
       * Infobox
       * @description server parsed infobox, a map from key to string or tuple
       * null if server infobox is not valid
       */
      infobox?: { [key: string]: unknown }[];
      /**
       * Gender
       * @description parsed from wiki, maybe null
       */
      gender?: string;
      /** @description parsed from wiki, maybe null, `1, 2, 3, 4` for `A, B, CD, O` */
      blood_type?: components["schemas"]["BloodType"];
      /**
       * Birth Year
       * @description parsed from wiki, maybe `null`
       */
      birth_year?: number;
      /**
       * Birth Mon
       * @description parsed from wiki, maybe `null`
       */
      birth_mon?: number;
      /**
       * Birth Day
       * @description parsed from wiki, maybe `null`
       */
      birth_day?: number;
      stat: components["schemas"]["Stat"];
    };
    /** CharacterPerson */
    CharacterPerson: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      /** @description 角色，机体，舰船，组织... */
      type: components["schemas"]["CharacterType"];
      /**
       * Images
       * @description object with some size of images, this object maybe `null`
       */
      images?: components["schemas"]["PersonImages"];
      /** Subject Id */
      subject_id: number;
      /** Subject Name */
      subject_name: string;
      /** Subject Name Cn */
      subject_name_cn: string;
    };
    /**
     * CharacterType
     * @description An enumeration.
     */
    CharacterType: 1 | 2 | 3 | 4;
    /** Collection */
    Collection: {
      /** Wish */
      wish: number;
      /** Collect */
      collect: number;
      /** Doing */
      doing: number;
      /** On Hold */
      on_hold: number;
      /** Dropped */
      dropped: number;
    };
    /**
     * CollectionType
     * @description - `1`: 想看
     * - `2`: 看过
     * - `3`: 在看
     * - `4`: 搁置
     * - `5`: 抛弃
     */
    CollectionType: 1 | 2 | 3 | 4 | 5;
    /**
     * Creator
     * @description 意义同<a href="#model-Me">Me</a>
     */
    Creator: {
      /** Username */
      username: string;
      /** Nickname */
      nickname: string;
    };
    /** DetailedRevision */
    DetailedRevision: {
      /** Id */
      id: number;
      /** Type */
      type: number;
      creator?: components["schemas"]["Creator"];
      /** Summary */
      summary: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Data
       * @description 编辑修改内容
       */
      data?: unknown;
    };
    /**
     * EpType
     * @description 本篇 = 0
     * 特别篇 = 1
     * OP = 2
     * ED = 3
     * 预告/宣传/广告 = 4
     * MAD = 5
     * 其他 = 6
     */
    EpType: 0 | 1 | 2 | 3 | 4 | 5 | 6;
    /** Episode */
    Episode: {
      /** Id */
      id: number;
      /**
       * Type
       * @description `0` 本篇，`1` SP，`2` OP，`3` ED
       */
      type: number;
      /** Name */
      name: string;
      /** Name Cn */
      name_cn: string;
      /**
       * Sort
       * @description 同类条目的排序和集数
       */
      sort: number;
      /**
       * Ep
       * @description 条目内的集数, 从`1`开始。非本篇剧集的此字段无意义
       */
      ep?: number;
      /** Airdate */
      airdate: string;
      /** Comment */
      comment: number;
      /** Duration */
      duration: string;
      /**
       * Desc
       * @description 简介
       */
      desc: string;
      /**
       * Disc
       * @description 音乐曲目的碟片数
       */
      disc: number;
    };
    /** EpisodeDetail */
    EpisodeDetail: {
      /** Id */
      id: number;
      /**
       * Type
       * @description `0` 本篇，`1` SP，`2` OP，`3` ED
       */
      type: number;
      /** Name */
      name: string;
      /** Name Cn */
      name_cn: string;
      /**
       * Sort
       * @description 同类条目的排序和集数
       */
      sort: number;
      /**
       * Ep
       * @description 条目内的集数, 从`1`开始。非本篇剧集的此字段无意义
       */
      ep?: number;
      /** Airdate */
      airdate: string;
      /** Comment */
      comment: number;
      /** Duration */
      duration: string;
      /**
       * Desc
       * @description 简介
       */
      desc: string;
      /**
       * Disc
       * @description 音乐曲目的碟片数
       */
      disc: number;
      /** Subject Id */
      subject_id: number;
    };
    /** ErrorDetail */
    ErrorDetail: {
      /** Title */
      title: string;
      /** Description */
      description: string;
      /** Detail */
      detail: {
        /** @description error message */
        error: string;
        /** @description request path */
        path: string;
      };
    };
    /** Images */
    Images: {
      /** Large */
      large: string;
      /** Common */
      common: string;
      /** Medium */
      medium: string;
      /** Small */
      small: string;
      /** Grid */
      grid: string;
    };
    /** Index */
    Index: {
      /** Id */
      id: number;
      /** Title */
      title: string;
      /** Desc */
      desc: string;
      /**
       * Total
       * @description 收录条目总数
       */
      total?: number;
      /**
       * Stat
       * @description 目录评论及收藏数
       */
      stat: components["schemas"]["Stat"];
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      creator: components["schemas"]["Creator"];
      /** Ban */
      ban: boolean;
    };
    /**
     * IndexSubject
     * @description 同名字段意义同<a href="#model-Subject">Subject</a>
     */
    IndexSubject: {
      /** Id */
      id: number;
      /** Type */
      type: number;
      /** Name */
      name: string;
      images?: components["schemas"]["Images"];
      /** Infobox */
      infobox?: components["schemas"]["Item"][];
      /** Date */
      date?: string;
      /** Comment */
      comment: string;
      /**
       * Added At
       * Format: date-time
       */
      added_at: string;
    };
    /** Item */
    Item: {
      /** Key */
      key: string;
      /** Value */
      value: Partial<string> &
        Partial<
          (Partial<components["schemas"]["KV"]> &
            Partial<components["schemas"]["V"]>)[]
        >;
    };
    /** KV */
    KV: {
      /** K */
      k: string;
      /** V */
      v: string;
    };
    /** Me */
    Me: {
      /** Id */
      id: number;
      /** Url */
      url: string;
      /**
       * Username
       * @description 唯一用户名，初始与uid相同，可修改
       */
      username: string;
      /** Nickname */
      nickname: string;
      user_group: components["schemas"]["UserGroup1"];
      avatar: components["schemas"]["Avatar"];
      /** Sign */
      sign: string;
    };
    /** Paged[Episode] */
    Paged_Episode_: {
      /** Total */
      total: number;
      /** Limit */
      limit: number;
      /** Offset */
      offset: number;
      /**
       * Data
       * @default
       */
      data: components["schemas"]["Episode"][];
    };
    /** Paged[IndexSubject] */
    Paged_IndexSubject_: {
      /** Total */
      total: number;
      /** Limit */
      limit: number;
      /** Offset */
      offset: number;
      /**
       * Data
       * @default
       */
      data: components["schemas"]["IndexSubject"][];
    };
    /** Paged[Revision] */
    Paged_Revision_: {
      /** Total */
      total: number;
      /** Limit */
      limit: number;
      /** Offset */
      offset: number;
      /**
       * Data
       * @default
       */
      data: components["schemas"]["Revision"][];
    };
    /** Paged[UserCollection] */
    Paged_UserCollection_: {
      /** Total */
      total: number;
      /** Limit */
      limit: number;
      /** Offset */
      offset: number;
      /**
       * Data
       * @default
       */
      data: components["schemas"]["UserCollection"][];
    };
    /** Person */
    Person: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      /** @description `1`, `2`, `3` 表示 `个人`, `公司`, `组合` */
      type: components["schemas"]["PersonType"];
      career: components["schemas"]["PersonCareer"][];
      /**
       * Images
       * @description object with some size of images, this object maybe `null`
       */
      images?: components["schemas"]["PersonImages"];
      /** Short Summary */
      short_summary: string;
      /** Locked */
      locked: boolean;
    };
    /**
     * PersonCareer
     * @description An enumeration.
     */
    PersonCareer:
      | "producer"
      | "mangaka"
      | "artist"
      | "seiyu"
      | "writer"
      | "illustrator"
      | "actor";
    /** PersonCharacter */
    PersonCharacter: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      /** @description 角色，机体，舰船，组织... */
      type: components["schemas"]["CharacterType"];
      /**
       * Images
       * @description object with some size of images, this object maybe `null`
       */
      images?: components["schemas"]["PersonImages"];
      /** Subject Id */
      subject_id: number;
      /** Subject Name */
      subject_name: string;
      /** Subject Name Cn */
      subject_name_cn: string;
    };
    /** PersonDetail */
    PersonDetail: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      /** @description `1`, `2`, `3` 表示 `个人`, `公司`, `组合` */
      type: components["schemas"]["PersonType"];
      career: components["schemas"]["PersonCareer"][];
      /**
       * Images
       * @description object with some size of images, this object maybe `null`
       */
      images?: components["schemas"]["PersonImages"];
      /** Summary */
      summary: string;
      /** Locked */
      locked: boolean;
      /**
       * Last Modified
       * Format: date-time
       * @description currently it's latest user comment time, it will be replaced by wiki modified date in the future
       */
      last_modified: string;
      /**
       * Infobox
       * @description server parsed infobox, a map from key to string or tuple
       * null if server infobox is not valid
       */
      infobox?: { [key: string]: unknown }[];
      /**
       * Gender
       * @description parsed from wiki, maybe null
       */
      gender?: string;
      /** @description parsed from wiki, maybe null, `1, 2, 3, 4` for `A, B, CD, O` */
      blood_type?: components["schemas"]["BloodType"];
      /**
       * Birth Year
       * @description parsed from wiki, maybe `null`
       */
      birth_year?: number;
      /**
       * Birth Mon
       * @description parsed from wiki, maybe `null`
       */
      birth_mon?: number;
      /**
       * Birth Day
       * @description parsed from wiki, maybe `null`
       */
      birth_day?: number;
      stat: components["schemas"]["Stat"];
    };
    /** PersonImages */
    PersonImages: {
      /** Large */
      large: string;
      /** Medium */
      medium: string;
      /** Small */
      small: string;
      /** Grid */
      grid: string;
    };
    /**
     * PersonType
     * @description An enumeration.
     */
    PersonType: 1 | 2 | 3;
    /** Rating */
    Rating: {
      /** Rank */
      rank: number;
      /** Total */
      total: number;
      /** Count */
      count: {
        "1": number;
        "2": number;
        "3": number;
        "4": number;
        "5": number;
        "6": number;
        "7": number;
        "8": number;
        "9": number;
        "10": number;
      };
      /** Score */
      score: number;
    };
    /** RelatedCharacter */
    RelatedCharacter: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      /** @description 角色，机体，舰船，组织... */
      type: components["schemas"]["CharacterType"];
      /**
       * Images
       * @description object with some size of images, this object maybe `null`
       */
      images?: components["schemas"]["PersonImages"];
      /** Relation */
      relation: string;
      /**
       * Actors
       * @description 演员列表
       * @default
       */
      actors?: components["schemas"]["Person"][];
    };
    /** RelatedPerson */
    RelatedPerson: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      /** @description `1`, `2`, `3` 表示 `个人`, `公司`, `组合` */
      type: components["schemas"]["PersonType"];
      career: components["schemas"]["PersonCareer"][];
      /**
       * Images
       * @description object with some size of images, this object maybe `null`
       */
      images?: components["schemas"]["PersonImages"];
      /** Relation */
      relation: string;
    };
    /** Revision */
    Revision: {
      /** Id */
      id: number;
      /** Type */
      type: number;
      creator?: components["schemas"]["Creator"];
      /** Summary */
      summary: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
    };
    /** Stat */
    Stat: {
      /** Comments */
      comments: number;
      /** Collects */
      collects: number;
    };
    /** Subject */
    Subject1: {
      /** Id */
      id: number;
      /** Type */
      type: number;
      /** Name */
      name: string;
      /** Name Cn */
      name_cn: string;
      /** Summary */
      summary: string;
      /** Nsfw */
      nsfw: boolean;
      /** Locked */
      locked: boolean;
      /**
       * Date
       * @description air date in `YYYY-MM-DD` format
       */
      date?: string;
      /**
       * Platform
       * @description TV, Web, 欧美剧, PS4...
       */
      platform: string;
      images?: components["schemas"]["Images"];
      /** Infobox */
      infobox?: components["schemas"]["Item"][];
      /**
       * Volumes
       * @description 书籍条目的册数，由旧服务端从wiki中解析
       */
      volumes: number;
      /**
       * Eps
       * @description 由旧服务端从wiki中解析，对于书籍条目为`话数`
       */
      eps: number;
      /**
       * Total Episodes
       * @description 数据库中的章节数量
       */
      total_episodes: number;
      rating: components["schemas"]["Rating"];
      collection: components["schemas"]["Collection"];
      /** Tags */
      tags: components["schemas"]["Tag"][];
    };
    /**
     * SubjectType
     * @description 条目类型
     * - `1` 为 书籍
     * - `2` 为 动画
     * - `3` 为 音乐
     * - `4` 为 游戏
     * - `6` 为 三次元
     *
     * 没有 `5`
     */
    SubjectType1: 1 | 2 | 3 | 4 | 6;
    /** Tag */
    Tag: {
      /** Name */
      name: string;
      /** Count */
      count: number;
    };
    /** UserCollection */
    UserCollection: {
      /** Subject Id */
      subject_id: number;
      subject_type: components["schemas"]["SubjectType1"];
      /** Rate */
      rate: number;
      type: components["schemas"]["CollectionType"];
      /** Comment */
      comment?: string;
      /** Tags */
      tags: string[];
      /** Ep Status */
      ep_status: number;
      /** Vol Status */
      vol_status: number;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /** Private */
      private: boolean;
    };
    /**
     * UserGroup
     * @description An enumeration.
     */
    UserGroup1: 1 | 2 | 3 | 4 | 5 | 8 | 9 | 10 | 11;
    /** V */
    V: {
      /** V */
      v: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: string[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** RelatedSubject */
    pol__api__v0__models__RelatedSubject: {
      /** Id */
      id: number;
      /** Staff */
      staff: string;
      /** Name */
      name?: string;
      /** Name Cn */
      name_cn: string;
      /** Image */
      image?: string;
    };
    /** RelatedSubject */
    pol__api__v0__models__subject__RelatedSubject: {
      /** Id */
      id: number;
      /** Type */
      type: number;
      /** Name */
      name: string;
      /** Name Cn */
      name_cn: string;
      images?: components["schemas"]["Images"];
      /** Relation */
      relation: string;
    };
  };
  responses: {
    /** 条目收藏信息 */
    Collection: {
      content: {
        "application/json": {
          status: components["schemas"]["CollectionStatus"];
          /** @description 评分 */
          rating: number;
          /** @description 评论 */
          comment: string;
          /** @description 收藏隐私 */
          private: 0 | 1;
          /** @description 标签 */
          tag: string[];
          /** @description 完成话数 */
          ep_status: number;
          /** @description 上次更新时间 */
          lasttouch: number;
          user: components["schemas"]["User"];
        };
      };
    };
  };
  parameters: {
    /** @description 用户名 <br> 也可使用 UID */
    username: string;
    /** @description 条目 ID */
    subject_id: number;
    /** @description 章节 ID */
    ep_id: number;
    /** @description 收视类型，参考 [EpStatusType](#model-EpStatusType) */
    ep_status: components["schemas"]["EpStatusType"];
    /** @description 返回数据大小，参考 [ResponseGroup](#model-ResponseGroup) <br> 默认为 small */
    responseGroup: components["schemas"]["ResponseGroup"];
    /** @description [https://bgm.tv/dev/app](https://bgm.tv/dev/app) 申请到的 App ID */
    app_id: string;
  };
}

export interface operations {
  /** cache with 300s */
  get_subject_by_id_v0_subjects__subject_id__get: {
    parameters: {
      path: {
        subject_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Subject1"];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_subject_persons_v0_subjects__subject_id__persons_get: {
    parameters: {
      path: {
        subject_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RelatedPerson"][];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_subject_characters_v0_subjects__subject_id__characters_get: {
    parameters: {
      path: {
        subject_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RelatedCharacter"][];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_subject_relations_v0_subjects__subject_id__subjects_get: {
    parameters: {
      path: {
        subject_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["pol__api__v0__models__subject__RelatedSubject"][];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_episodes_v0_episodes_get: {
    parameters: {
      query: {
        subject_id: number;
        /** 参照章节的`type` */
        type?: components["schemas"]["EpType"];
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Paged_Episode_"];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_episode_v0_episodes__episode_id__get: {
    parameters: {
      path: {
        episode_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EpisodeDetail"];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  /** cache with 60s */
  get_character_detail_v0_characters__character_id__get: {
    parameters: {
      path: {
        character_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CharacterDetail"];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_person_subjects_v0_characters__character_id__subjects_get: {
    parameters: {
      path: {
        character_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["pol__api__v0__models__RelatedSubject"][];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_character_persons_v0_characters__character_id__persons_get: {
    parameters: {
      path: {
        character_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CharacterPerson"][];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  /** cache with 60s */
  get_person_v0_persons__person_id__get: {
    parameters: {
      path: {
        person_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PersonDetail"];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_person_subjects_v0_persons__person_id__subjects_get: {
    parameters: {
      path: {
        person_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["pol__api__v0__models__RelatedSubject"][];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_person_characters_v0_persons__person_id__characters_get: {
    parameters: {
      path: {
        person_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PersonCharacter"][];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  /** 返回当前 Access Token 对应的用户信息 */
  get_user_v0_me_get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Me"];
        };
      };
      /** unauthorized */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  /** 获取对应用户的收藏，查看私有收藏需要access token。 */
  get_user_collection_v0_users__username__collections_get: {
    parameters: {
      path: {
        /** 设置了 username 后无法使用UID */
        username: string;
      };
      query: {
        /**
         * 条目类型，默认为全部
         *
         * 具体含义见 [SubjectType](#model-SubjectType)
         */
        subject_type?: components["schemas"]["SubjectType1"];
        /**
         * 收藏类型，默认为全部
         *
         * 具体含义见 [CollectionType](#model-CollectionType)
         */
        type?: components["schemas"]["CollectionType"];
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Paged_UserCollection_"];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** 用户不存在 */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_person_revisions_v0_revisions_persons_get: {
    parameters: {
      query: {
        person_id: number;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Paged_Revision_"];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_person_revision_v0_revisions_persons__revision_id__get: {
    parameters: {
      path: {
        revision_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DetailedRevision"];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_character_revisions_v0_revisions_characters_get: {
    parameters: {
      query: {
        character_id: number;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Paged_Revision_"];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_character_revision_v0_revisions_characters__revision_id__get: {
    parameters: {
      path: {
        revision_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DetailedRevision"];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_subject_revisions_v0_revisions_subjects_get: {
    parameters: {
      query: {
        subject_id: number;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Paged_Revision_"];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_subject_revision_v0_revisions_subjects__revision_id__get: {
    parameters: {
      path: {
        revision_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DetailedRevision"];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_episode_revisions_v0_revisions_episodes_get: {
    parameters: {
      query: {
        episode_id: number;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Paged_Revision_"];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_episode_revision_v0_revisions_episodes__revision_id__get: {
    parameters: {
      path: {
        revision_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DetailedRevision"];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_index_by_id_v0_indices__index_id__get: {
    parameters: {
      path: {
        index_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Index"];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
  get_index_subjects_v0_indices__index_id__subjects_get: {
    parameters: {
      path: {
        index_id: number;
      };
      query: {
        type?: components["schemas"]["SubjectType1"];
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Paged_IndexSubject_"];
        };
      };
      /** Validation Error */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorDetail"];
        };
      };
    };
  };
}

export interface external {}
